---
description: 
globs: 
alwaysApply: true
---

# AI Agent Operating Guidelines

These are specific instructions for the AI agent to follow during development:

## Code Structure & Design

*   **Prompt Separation**: Always keep LLM prompts separate from the main application logic. Consider storing them in dedicated files or modules (e.g., within `[keyvex_app/src/lib/prompts/](mdc:keyvex_app/src/lib/prompts)` or `[REFERENCE_CODE/prompts/](mdc:REFERENCE_CODE/prompts)`).
*   **AI Logic Isolation**: Ensure that AI-specific processing (e.g., model calls, orchestrator interactions) is clearly separated from general server-side processing and business logic.
*   **Database Flexibility**: When designing database tables or schemas, always include a generic metadata object (e.g., a JSON blob or a flexible key-value map). This allows for the inclusion of overlooked or later-added data types and properties without requiring immediate schema migrations. For example: `meta: { [key: string]: any }`.
*   **Test Page Organization**: **ALWAYS** create test pages within the `/tests/` directory structure. All development follows a test-first approach, so any new features, components, or functionality should have corresponding test pages created in the appropriate `/tests/` subdirectory:
    - **API Tests**: `/tests/api/` for API route testing
    - **UI Tests**: `/tests/ui/` for component and workflow testing  
    - **AI Tests**: `/tests/brand-intelligence/`, `/tests/model-config/` for AI-specific testing
    - **Admin Tests**: `/tests/admin/` for administrative functionality testing
    - **Custom Tests**: Create new subdirectories under `/tests/` as needed for specific test categories
    - **Navigation**: Update the main test dashboard at `/tests/page.tsx` when adding new test categories

## Development Workflow

*   **Git Checkpoint Strategy**: Before making significant structural changes, large refactoring, or modifications that affect multiple files, ALWAYS create a git checkpoint by committing current work with a descriptive message like "checkpoint: before [description of major change]". This ensures we can easily revert if needed and provides a clear history of incremental progress.
*   **Development Server**: Do not attempt to start or manage the Next.js development server. The user will handle this manually.
*   **Version Control**: Do not push changes to Git repositories unless explicitly requested by the user. Confirm before any `git push` operation.

## General Reminders


*   Adhere to the guidelines in `[.cursor/rules/Project_Guidelines.mdc](mdc:.cursor/rules/Project_Guidelines.mdc)` for overall project structure and conventions.