{
 "Resources": {
  "LeaseUploadsBucketDC35BC91": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "tenantarmorstack-lease-uploads",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "PUT",
        "GET",
        "POST",
        "HEAD"
       ],
       "AllowedOrigins": [
        "http://localhost:3000",
        "https://*.vercel.app",
        "https://tenantarmor.com"
       ],
       "ExposedHeaders": [
        "ETag"
       ]
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "AbortIncompleteMultipartUpload": {
        "DaysAfterInitiation": 1
       },
       "Status": "Enabled"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/LeaseUploadsBucket/Resource"
   }
  },
  "LeaseUploadsBucketPolicy75DAA7DA": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "LeaseUploadsBucketDC35BC91"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "LeaseUploadsBucketDC35BC91",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "LeaseUploadsBucketDC35BC91",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/LeaseUploadsBucket/Policy/Resource"
   }
  },
  "LeaseUploadsBucketAutoDeleteObjectsCustomResource9CABC43D": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "LeaseUploadsBucketDC35BC91"
    }
   },
   "DependsOn": [
    "LeaseUploadsBucketPolicy75DAA7DA"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/LeaseUploadsBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "LeaseUploadsBucketNotifications79D17F77": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "LeaseUploadsBucketDC35BC91"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "prefix",
           "Value": "uploads/"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "ProcessUploadedLeaseLambda6238D151",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "LeaseUploadsBucketAllowBucketNotificationsToTenantArmorStackProcessUploadedLeaseLambda3BBEFBC8C159C609",
    "LeaseUploadsBucketPolicy75DAA7DA"
   ],
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/LeaseUploadsBucket/Notifications/Resource"
   }
  },
  "LeaseUploadsBucketAllowBucketNotificationsToTenantArmorStackProcessUploadedLeaseLambda3BBEFBC8C159C609": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ProcessUploadedLeaseLambda6238D151",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "LeaseUploadsBucketDC35BC91",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/LeaseUploadsBucket/AllowBucketNotificationsToTenantArmorStackProcessUploadedLeaseLambda3BBEFBC8"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "LeaseUploadsBucketDC35BC91"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "LeaseAnalysesTableB22F85EA": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "analysisId",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "analysisId",
      "KeyType": "HASH"
     }
    ],
    "StreamSpecification": {
     "StreamViewType": "NEW_AND_OLD_IMAGES"
    },
    "TableName": "TenantArmorStack-LeaseAnalyses"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/LeaseAnalysesTable/Resource"
   }
  },
  "EvictionTemplatesTable3873B700": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "state",
      "AttributeType": "S"
     },
     {
      "AttributeName": "templateName",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "state",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "templateName",
      "KeyType": "RANGE"
     }
    ],
    "TableName": "EvictionResponseTemplates"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/EvictionTemplatesTable/Resource"
   }
  },
  "AIPromptsTable3CCB588B": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "promptType",
      "AttributeType": "S"
     },
     {
      "AttributeName": "version",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "promptType",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "version",
      "KeyType": "RANGE"
     }
    ],
    "TableName": "TenantArmorStack-AIPrompts"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AIPromptsTable/Resource"
   }
  },
  "AIPromptsBucket0DF82D69": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "tenantarmorstack-ai-prompts-",
       {
        "Ref": "AWS::AccountId"
       }
      ]
     ]
    },
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "PUT"
       ],
       "AllowedOrigins": [
        "*"
       ]
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AIPromptsBucket/Resource"
   }
  },
  "AIPromptsBucketPolicyA10CE00B": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "AIPromptsBucket0DF82D69"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "AIPromptsBucket0DF82D69",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AIPromptsBucket0DF82D69",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AIPromptsBucket/Policy/Resource"
   }
  },
  "AIPromptsBucketAutoDeleteObjectsCustomResourceCA8EC715": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "AIPromptsBucket0DF82D69"
    }
   },
   "DependsOn": [
    "AIPromptsBucketPolicyA10CE00B"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AIPromptsBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "PdfProcessorLambdaRoleD51BBF8B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/PdfProcessorLambdaRole/Resource"
   }
  },
  "PdfProcessorLambdaRoleDefaultPolicyBBF4899A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LeaseUploadsBucketDC35BC91",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "LeaseUploadsBucketDC35BC91",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LeaseAnalysesTableB22F85EA",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PdfProcessorLambdaRoleDefaultPolicyBBF4899A",
    "Roles": [
     {
      "Ref": "PdfProcessorLambdaRoleD51BBF8B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/PdfProcessorLambdaRole/DefaultPolicy/Resource"
   }
  },
  "ProcessUploadedLeaseLambda6238D151": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "9a335fd3da6bd091c8a93bf62a07537bf58842ff733038cef6c35b4b249ae682.zip"
    },
    "Environment": {
     "Variables": {
      "LEASE_ANALYSES_TABLE_NAME": {
       "Ref": "LeaseAnalysesTableB22F85EA"
      },
      "NEXTJS_API_ENDPOINT_FOR_LAMBDA": "https://tenant-armor.vercel.app/api/ai/initiate-lease-analysis"
     }
    },
    "FunctionName": "TenantArmorStack-ProcessUploadedLease",
    "Handler": "index.handler",
    "Layers": [
     "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p312-PyMuPDF:6"
    ],
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "PdfProcessorLambdaRoleD51BBF8B",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 180
   },
   "DependsOn": [
    "PdfProcessorLambdaRoleDefaultPolicyBBF4899A",
    "PdfProcessorLambdaRoleD51BBF8B"
   ],
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/ProcessUploadedLeaseLambda/Resource",
    "aws:asset:path": "asset.9a335fd3da6bd091c8a93bf62a07537bf58842ff733038cef6c35b4b249ae682.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "AILeaseProcessingDLQ7E231DA2": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 1209600,
    "QueueName": "TenantArmorStack-AILeaseProcessingDLQ"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AILeaseProcessingDLQ/Resource"
   }
  },
  "AILeaseProcessingQueue3D3BAE1B": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "QueueName": "TenantArmorStack-AILeaseProcessingQueue",
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "AILeaseProcessingDLQ7E231DA2",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "VisibilityTimeout": 900
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AILeaseProcessingQueue/Resource"
   }
  },
  "NextJsApiPolicyAB2F22D0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "LeaseUploadsBucketDC35BC91",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "LeaseUploadsBucketDC35BC91",
            "Arn"
           ]
          },
          "/uploads/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "EvictionTemplatesTable3873B700",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "LeaseAnalysesTableB22F85EA",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ProcessUploadedLeaseLambda6238D151",
         "Arn"
        ]
       }
      },
      {
       "Action": "sqs:SendMessage",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "AILeaseProcessingQueue3D3BAE1B",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "NextJsApiPolicyAB2F22D0",
    "Users": [
     {
      "Ref": "PlaceholderNextJsUserFA5D6A0D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/NextJsApiPolicy/Resource"
   }
  },
  "PlaceholderNextJsUserFA5D6A0D": {
   "Type": "AWS::IAM::User",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/PlaceholderNextJsUser/Resource"
   }
  },
  "TenantArmorApi6FD33BF1": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Description": "API for TenantArmor services.",
    "Name": "TenantArmorStack-TenantArmorApi"
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/TenantArmorApi/Resource"
   }
  },
  "TenantArmorApiCloudWatchRoleE2A31DF7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/TenantArmorApi/CloudWatchRole/Resource"
   }
  },
  "TenantArmorApiAccount1767555F": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "TenantArmorApiCloudWatchRoleE2A31DF7",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "TenantArmorApi6FD33BF1"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/TenantArmorApi/Account"
   }
  },
  "TenantArmorApiDeployment9D8549B3a4c04fe45fff730eeb76f6876524f36a": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "API for TenantArmor services.",
    "RestApiId": {
     "Ref": "TenantArmorApi6FD33BF1"
    }
   },
   "DependsOn": [
    "TenantArmorApiOPTIONSBE9D7544"
   ],
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/TenantArmorApi/Deployment/Resource"
   }
  },
  "TenantArmorApiDeploymentStagev11E73D1BA": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "TenantArmorApiDeployment9D8549B3a4c04fe45fff730eeb76f6876524f36a"
    },
    "RestApiId": {
     "Ref": "TenantArmorApi6FD33BF1"
    },
    "StageName": "v1"
   },
   "DependsOn": [
    "TenantArmorApiAccount1767555F"
   ],
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/TenantArmorApi/DeploymentStage.v1/Resource"
   }
  },
  "TenantArmorApiOPTIONSBE9D7544": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "TenantArmorApi6FD33BF1",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "TenantArmorApi6FD33BF1"
    }
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/TenantArmorApi/Default/OPTIONS/Resource"
   }
  },
  "AILeaseProcessingLambdaRoleE84880F0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AILeaseProcessingLambdaRole/Resource"
   }
  },
  "AILeaseProcessingLambdaRoleDefaultPolicyE5C90903": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:GetItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "LeaseAnalysesTableB22F85EA",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "AILeaseProcessingQueue3D3BAE1B",
         "Arn"
        ]
       }
      },
      {
       "Action": "secretsmanager:GetSecretValue",
       "Effect": "Allow",
       "Resource": "arn:aws:secretsmanager:us-east-1:622703699030:secret:TenantArmorOpenAIKey-mruJz5"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:Scan"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "AIPromptsTable3CCB588B",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "AIPromptsBucket0DF82D69",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AIPromptsBucket0DF82D69",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "ssm:GetParameter",
        "ssm:GetParameters"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:ssm:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":parameter/tenant-armor/prompts/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AILeaseProcessingLambdaRoleDefaultPolicyE5C90903",
    "Roles": [
     {
      "Ref": "AILeaseProcessingLambdaRoleE84880F0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AILeaseProcessingLambdaRole/DefaultPolicy/Resource"
   }
  },
  "AILeaseProcessingLambdaC5ABBDB3": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "dc4430861521e73f963e4d6344e751b5a658d7df42fe7845eb01da14db184265.zip"
    },
    "Environment": {
     "Variables": {
      "OPENAI_API_KEY_SECRET_NAME": "TenantArmorOpenAIKey",
      "DYNAMODB_LEASE_ANALYSES_TABLE": {
       "Ref": "LeaseAnalysesTableB22F85EA"
      },
      "AI_PROCESSING_QUEUE_URL": {
       "Ref": "AILeaseProcessingQueue3D3BAE1B"
      },
      "OPENAI_MODEL": "gpt-4o",
      "PROMPTS_TABLE_NAME": {
       "Ref": "AIPromptsTable3CCB588B"
      },
      "PROMPTS_BUCKET_NAME": {
       "Ref": "AIPromptsBucket0DF82D69"
      }
     }
    },
    "FunctionName": "TenantArmorStack-AILeaseProcessingLambda",
    "Handler": "index.handler",
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "AILeaseProcessingLambdaRoleE84880F0",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Timeout": 900
   },
   "DependsOn": [
    "AILeaseProcessingLambdaRoleDefaultPolicyE5C90903",
    "AILeaseProcessingLambdaRoleE84880F0"
   ],
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AILeaseProcessingLambda/Resource",
    "aws:asset:path": "asset.dc4430861521e73f963e4d6344e751b5a658d7df42fe7845eb01da14db184265.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "AILeaseProcessingEventSourceMapping6AF5799E": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 1,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "AILeaseProcessingQueue3D3BAE1B",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "AILeaseProcessingLambdaC5ABBDB3"
    },
    "MaximumBatchingWindowInSeconds": 0
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/AILeaseProcessingEventSourceMapping/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2WQwVICMQyGn4V7qcAeHI+AemNE0DMT2riW3bbrpoXZ2em723ZXwfGUL3/SP2kWfP5wz2cTuNBUyGpaqyPv9w5ExaJ06Kng/cqLCh1bf5iRhrC1tRLdVR7zIVkBYWA16KME3seeLbZaESlr2LM3wiWI8i8/ndG4vfWtwA00jTJlKv9XA5OdAW1l3PMNjjWmtgyBKdC839lBy/G640jvhG1KUwyMigMQoSO+TIHRF/H+1aPPDhkCg0aV4PACXTRHcstGZf8rLoWw3jj2iE1tOx1XTupNFg9aZssB4tP8pXQktkH3aWUqDhQCW3tyVv90jcNG/lPatvasJLbZKH8hDUi3u3384l3jXWDGSuQnujsvZrzg88mJlJq2cXGlke+G+A2vJH9LEAIAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "TenantArmorStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "NextJsApiPolicyNameOutput": {
   "Description": "Name of the IAM policy for Next.js API access. Attach this to your Vercel project IAM role.",
   "Value": "NextJsApiPolicyAB2F22D0"
  },
  "VercelIamRoleGuidance": {
   "Description": "Guidance for Next.js API permissions",
   "Value": "Create an IAM role in your AWS account. Trust relationship should allow Vercel (e.g., oidc.vercel.com). Attach the IAM policy named 'NextJsApiPolicyAB2F22D0' and any other necessary policies to this role. Configure this role in your Vercel project settings."
  },
  "TenantArmorApiEndpoint32B4AECA": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "TenantArmorApi6FD33BF1"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "TenantArmorApiDeploymentStagev11E73D1BA"
      },
      "/"
     ]
    ]
   }
  },
  "LeaseUploadBucketNameOutput": {
   "Description": "Name of the S3 bucket for lease uploads",
   "Value": {
    "Ref": "LeaseUploadsBucketDC35BC91"
   }
  },
  "LeaseAnalysesTableNameOutput": {
   "Description": "Name of the DynamoDB table for lease analyses",
   "Value": {
    "Ref": "LeaseAnalysesTableB22F85EA"
   }
  },
  "ProcessPdfFunctionNameOutput": {
   "Description": "Name of the ProcessUploadedLease Lambda function",
   "Value": {
    "Ref": "ProcessUploadedLeaseLambda6238D151"
   }
  },
  "ApiGatewayEndpointOutput": {
   "Description": "Endpoint URL for the API Gateway",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "TenantArmorApi6FD33BF1"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "TenantArmorApiDeploymentStagev11E73D1BA"
      },
      "/"
     ]
    ]
   }
  },
  "AILeaseProcessingQueueUrlOutput": {
   "Description": "URL of the SQS queue for AI lease processing",
   "Value": {
    "Ref": "AILeaseProcessingQueue3D3BAE1B"
   }
  },
  "AILeaseProcessingQueueArnOutput": {
   "Description": "ARN of the SQS queue for AI lease processing",
   "Value": {
    "Fn::GetAtt": [
     "AILeaseProcessingQueue3D3BAE1B",
     "Arn"
    ]
   }
  },
  "AILeaseProcessingLambdaNameOutput": {
   "Description": "Name of the AI Lease Processing Lambda function",
   "Value": {
    "Ref": "AILeaseProcessingLambdaC5ABBDB3"
   }
  },
  "EvictionTemplatesTableNameOutput": {
   "Description": "Name of the DynamoDB table for eviction templates",
   "Value": {
    "Ref": "EvictionTemplatesTable3873B700"
   }
  },
  "PromptsTableNameOutput": {
   "Description": "Name of the DynamoDB table for AI prompts management",
   "Value": {
    "Ref": "AIPromptsTable3CCB588B"
   }
  },
  "PromptsBucketNameOutput": {
   "Description": "Name of the S3 bucket for storing AI prompt files",
   "Value": {
    "Ref": "AIPromptsBucket0DF82D69"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}