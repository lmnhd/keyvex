'use client';

import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardContent, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Checkbox } from '@/components/ui/checkbox';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Wand2, AlertCircle, Play, CheckCircle, Eye, Save, Copy, Download, Trash2, Settings, Database, ChevronRight, Pause, SkipForward, RefreshCw, Clock, Target, User, MessageSquare, Briefcase, Brain, Info, Zap, Activity, Wifi, WifiOff, Loader2, Code } from 'lucide-react';
import { Textarea } from '@/components/ui/textarea';
import { useToolGenerationStream, type StepProgress, type ConnectionStatus } from '../hooks/useToolGenerationStream';
import { ProductToolDefinition } from '@/lib/types/product-tool';
import DEFAULT_MODELS from '@/lib/ai/models/default-models.json';
import { CanvasTool } from '@/components/tool-creator-ui/canvas-tool';

interface BrainstormData {
  id: string;
  toolType: string;
  targetAudience: string;
  businessContext?: string;
  industry?: string;
  timestamp: number;
  result?: any;
}

interface ModelOption {
  id: string;
  name: string;
  provider?: string;
}

interface AgentModelMapping {
  [agentName: string]: string;
}

type WorkflowMode = 'v1' | 'v2' | 'debug';
type OrchestrationStatus = 'free' | 'paused' | 'runone';
type TccSource = 'brainstorm' | 'savedV2Job' | 'mockScenario';

const STORAGE_KEYS = {
  selectedModels: 'tool-generation-workbench-selected-models',
  agentMapping: 'tool-generation-workbench-agent-mapping'
};

interface ToolCreationJob {
  modelId: string;
  jobId?: string;
  status: 'pending' | 'loading' | 'success' | 'error';
  result?: ProductToolDefinition | null;
  error?: string | null;
  startTime?: number;
  endTime?: number;
}

const mockTccScenarios = [
  {
    id: 'simple-calculator',
    name: 'Simple Calculator',
    tcc: {
      jobId: 'mock-calculator-1',
      userInput: {
        description: 'A simple calculator tool',
        targetAudience: 'general users',
        toolType: 'calculator'
      }
    }
  }
];

const ToolTester: React.FC<{ isDarkMode: boolean, newBrainstormFlag?: number }> = ({ isDarkMode, newBrainstormFlag }) => {
  const [selectedBrainstormId, setSelectedBrainstormId] = useState('');
  const [savedBrainstorms, setSavedBrainstorms] = useState<BrainstormData[]>([]);
  const [savedTools, setSavedTools] = useState<ProductToolDefinition[]>([]);
  const [savedV2Jobs, setSavedV2Jobs] = useState<any[]>([]);
  const [selectedModelIds, setSelectedModelIds] = useState<string[]>([]);
  const [availableModels, setAvailableModels] = useState<ModelOption[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [loadMode, setLoadMode] = useState<'new' | 'load'>('new');
  const [selectedLoadItem, setSelectedLoadItem] = useState<{ type: 'brainstorm' | 'tool' | 'v2job', id: string } | null>(null);
  const [testJob, setTestJob] = useState<ToolCreationJob | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [assembledCode, setAssembledCode] = useState<string | null>(null);
  const [finalProduct, setFinalProduct] = useState<ProductToolDefinition | null>(null);
  const [savedToolIds, setSavedToolIds] = useState<Set<string>>(new Set());
  const [savedV2JobIds, setSavedV2JobIds] = useState<Set<string>>(new Set());
  const [defaultPrimaryModel, setDefaultPrimaryModel] = useState<string | null>(null);
  const [hasInitialized, setHasInitialized] = useState(false);
  
  // Agent model mapping for individual agent testing
  const [agentModelMapping, setAgentModelMapping] = useState<AgentModelMapping>({});
  
  // NEW: workflowMode to distinguish between V1, V2 orchestration, and debug mode
  const [workflowMode, setWorkflowMode] = useState<WorkflowMode>('v2');
  const [orchestrationStatus, setOrchestrationStatus] = useState<OrchestrationStatus>('free');
  const [selectedAgent, setSelectedAgent] = useState<string>('');
  const [tccSource, setTccSource] = useState<TccSource>('brainstorm');
  const [selectedDebugTccJobId, setSelectedDebugTccJobId] = useState<string | null>(null);
  const [selectedMockScenarioId, setSelectedMockScenarioId] = useState<string>('');
  
  // TCC monitoring state
  const [tccData, setTccData] = useState<any>(null);
  const [currentStep, setCurrentStep] = useState<string>('');
  const [isRefreshingTCC, setIsRefreshingTCC] = useState(false);

  // WebSocket logging state
  const [wsLogs, setWsLogs] = useState<string[]>([]);
  const [streamingExample, setStreamingExample] = useState<string>('');
  
  // Add refs for auto-scrolling - FIXED: Auto-scroll implementation
  const wsLogsEndRef = useRef<HTMLDivElement>(null);
  const progressSummaryEndRef = useRef<HTMLDivElement>(null);

  // Available agents for individual testing (memoized to prevent re-creation)
  const availableAgents = React.useMemo(() => [
    { id: 'function-planner', name: 'Function Signature Planner', description: 'Plans tool functions and signatures' },
    { id: 'state-design', name: 'State Design Agent', description: 'Designs React state management' },
    { id: 'jsx-layout', name: 'JSX Layout Agent', description: 'Creates component structure' },
    { id: 'tailwind-styling', name: 'Tailwind Styling Agent', description: 'Applies complete styling system' },
    { id: 'component-assembler', name: 'Component Assembler', description: 'Combines all agent outputs' },
    { id: 'validator', name: 'Validator Agent', description: 'Validates generated code' },
    { id: 'tool-finalizer', name: 'Tool Finalizer', description: 'Creates final tool definition' }
  ], []);

  const addWSLog = useCallback((message: string) => {
    setWsLogs(prev => [...prev.slice(-19), `[${new Date().toLocaleTimeString()}] ${message}`]);
  }, []);

  // Enhanced WebSocket logging with detailed console output like the test page
  const addDetailedWSLog = useCallback((type: 'connection' | 'message' | 'error' | 'debug', message: string, data?: any) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
    
    // Add to UI logs
    setWsLogs(prev => [...prev.slice(-19), logMessage]);
    
    // Enhanced console logging like the test page
    if (type === 'connection') {
      console.log(`🔗 [WebSocket Connection] ${message}`, data);
    } else if (type === 'message') {
      console.log(`📨 [WebSocket Message] ${message}`, data);
    } else if (type === 'error') {
      console.error(`❌ [WebSocket Error] ${message}`, data);
    } else if (type === 'debug') {
      console.log(`🐛 [WebSocket Debug] ${message}`, data);
    }
  }, []);

  // FIXED: Clear logs function that properly clears all logs and progress
  const clearLogsAndProgress = useCallback(() => {
    setWsLogs([]);
    setCurrentStep('');
    setError(null);
    setTestJob(null);
    setAssembledCode(null);
    setFinalProduct(null);
    setTccData(null);
    addWSLog('🧹 Logs and progress cleared - starting fresh test');
  }, [addWSLog]);

  // WebSocket debug information state similar to test page
  const [wsDebugInfo, setWsDebugInfo] = useState({
    envVar: process.env.NEXT_PUBLIC_WEBSOCKET_API_ENDPOINT,
    hasEnvVar: !!process.env.NEXT_PUBLIC_WEBSOCKET_API_ENDPOINT,
    finalUrl: process.env.NEXT_PUBLIC_WEBSOCKET_API_ENDPOINT || 'Not Set',
    isPlaceholder: (process.env.NEXT_PUBLIC_WEBSOCKET_API_ENDPOINT || '').includes('your-websocket-api'),
    connectionAttempts: 0,
    lastConnectionTime: null as string | null,
    lastMessageTime: null as string | null
  });

  // LocalStorage utilities
  const saveToLocalStorage = useCallback((key: string, value: any) => {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.warn('Failed to save to localStorage:', error);
    }
  }, []);

  const loadFromLocalStorage = useCallback((key: string, defaultValue: any = null) => {
    try {
      const stored = localStorage.getItem(key);
      return stored ? JSON.parse(stored) : defaultValue;
    } catch (error) {
      console.warn('Failed to load from localStorage:', error);
      return defaultValue;
    }
  }, []);

  const handleJobUpdate = useCallback((progress: StepProgress) => {
    addWSLog(progress.message || `Progress for ${progress.stepName}: ${progress.status}`);
    setCurrentStep(progress.stepName);

    // Handle TCC data - could be nested or direct
    let actualTcc = progress.data;
    if (progress.data?.tcc) {
      // If data has a nested tcc property, use that
      actualTcc = progress.data.tcc;
    } else if (progress.data?.userId || progress.data?.jobId) {
      // If data looks like a TCC itself, use it directly
      actualTcc = progress.data;
    }

    if (actualTcc) {
      setTccData(actualTcc);
      if (actualTcc.assembledComponentCode) {
        setAssembledCode(actualTcc.assembledComponentCode);
        addWSLog('✅ Assembled code received from TCC update!');
      }
    }

    // Handle final tool completion
    if (progress.stepName === 'finalizing_tool' && progress.status === 'completed' && progress.data) {
      // Check if finalProduct is nested in the data or if data is the product itself
      const finalProductData = progress.data.finalProduct || progress.data;
      
      if (finalProductData && (finalProductData.id || finalProductData.componentCode)) {
        setFinalProduct(finalProductData);
        if (finalProductData.componentCode) {
          setAssembledCode(finalProductData.componentCode);
        }
        addWSLog('✅ Final product received!');

        setTestJob(prev => ({
          ...(prev as ToolCreationJob),
          status: 'success',
          result: finalProductData,
          endTime: Date.now()
        }));
      } else {
        addWSLog('⚠️ Final tool step completed but no valid product data found');
        console.warn('Final tool data structure:', progress.data);
      }
    }
  }, [addWSLog, assembledCode]);

  // Enhanced progress monitoring with detailed logging
  const enhancedHandleJobUpdate = useCallback((progress: StepProgress) => {
    // Log detailed progress information
    addDetailedWSLog('message', `Step Progress: ${progress.stepName} -> ${progress.status}`, {
      jobId: progress.jobId,
      message: progress.message,
      dataKeys: progress.data ? Object.keys(progress.data) : [],
      isFallback: progress.isFallback
    });
    
    // Call the original handler
    handleJobUpdate(progress);
  }, [handleJobUpdate, addDetailedWSLog]);

  const { 
    connect, 
    disconnect, 
    connectionStatus, 
    progressUpdates, 
    messages, 
    setProgressUpdates 
  }: {
    connect: () => Promise<void>;
    disconnect: () => void;
    connectionStatus: ConnectionStatus;
    progressUpdates: StepProgress[];
    messages: Array<{ type: string; data: any }>;
    setProgressUpdates: React.Dispatch<React.SetStateAction<StepProgress[]>>;
  } = useToolGenerationStream({ 
    onProgress: enhancedHandleJobUpdate,
    onMessage: (message) => {
      addDetailedWSLog('message', `WebSocket message received: ${message.type}`, message.data);
    },
    onError: (error) => {
      addDetailedWSLog('error', `WebSocket error: ${error}`);
    }
  }) as any;


  // Enhanced connection monitoring
  useEffect(() => {
    if (connectionStatus === 'connected') {
      addDetailedWSLog('connection', 'WebSocket connection established successfully');
    } else if (connectionStatus === 'connecting') {
      addDetailedWSLog('connection', 'Attempting WebSocket connection...');
    } else if (connectionStatus === 'error') {
      addDetailedWSLog('error', 'WebSocket connection failed');
    } else if (connectionStatus === 'fallback') {
      addDetailedWSLog('debug', 'Using fallback mode - no real WebSocket connection');
    }
  }, [connectionStatus, addDetailedWSLog]);

  // FIXED: Auto-scroll effects that happen after hook declarations
  useEffect(() => {
    if (wsLogsEndRef.current) {
      wsLogsEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [wsLogs]);

  useEffect(() => {
    if (progressSummaryEndRef.current) {
      progressSummaryEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [progressUpdates]);

  // Get default model for agent from processModels in default-models.json
  const getDefaultModelForAgent = useCallback((agentId: string): string => {
    const processModelsMapping: { [key: string]: string } = {
      'function-planner': 'functionPlanner',
      'validator': 'validation',
      'tool-finalizer': 'toolCreator',
      'component-assembler': 'toolCreator',
      'state-design': 'toolCreator',
      'jsx-layout': 'toolCreator', 
      'tailwind-styling': 'styleMaster'
    };

    const processName = processModelsMapping[agentId];
    if (processName && (DEFAULT_MODELS.processModels as any)?.[processName]?.primary?.model) {
      const modelId = (DEFAULT_MODELS.processModels as any)[processName].primary.model;
      console.log(`🎯 Using default model for ${agentId}: ${modelId} (from processModels.${processName})`);
      return modelId;
    }

    // Fallback to gpt-4.1-mini if no specific mapping
    const fallback = 'gpt-4.1-mini';
    console.log(`⚠️ No processModel mapping for ${agentId}, using fallback: ${fallback}`);
    return fallback;
  }, []);

  // FIXED: Function to get the actual models used in the workflow
  const getModelsUsed = useCallback(() => {
    if (workflowMode === 'debug' && selectedAgent) {
      // For debug mode, return the model assigned to the specific agent
      const agentModel = agentModelMapping[selectedAgent];
      return agentModel ? [agentModel] : [];
    } else if (workflowMode === 'v2') {
      // For V2 orchestration, return all unique models in agent mapping
      return Object.values(agentModelMapping).filter((model, index, arr) => arr.indexOf(model) === index);
    } else {
      // For V1 mode, return selected model IDs
      return selectedModelIds;
    }
  }, [workflowMode, selectedAgent, agentModelMapping, selectedModelIds]);

  // Fetch the configured default model from the toolCreator API
  const fetchDefaultModel = useCallback(async () => {
    try {
      const response = await fetch('/api/ai/create-tool'); 
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.defaultModel?.primary?.id) {
          setDefaultPrimaryModel(data.defaultModel.primary.id);
        }
      }
    } catch (error) {
      console.warn('Failed to fetch default model, using fallback:', error);
    }
  }, []);

  const fetchModels = useCallback(() => {
    console.log('🔄 Starting fetchModels...');
    console.log('DEFAULT_MODELS structure:', DEFAULT_MODELS);
    
    try {
      const parsedModels: ModelOption[] = [];
      
      if (!DEFAULT_MODELS || !DEFAULT_MODELS.providers) {
        console.error('❌ DEFAULT_MODELS or providers is undefined!');
        setError('DEFAULT_MODELS data is not properly loaded.');
        return;
      }
      
      console.log('📁 Found providers:', Object.keys(DEFAULT_MODELS.providers));
      
      for (const providerKey in DEFAULT_MODELS.providers) {
        const provider = (DEFAULT_MODELS.providers as any)[providerKey];
        console.log(`🏢 Processing provider: ${providerKey}`, provider);
        
        if (!provider || !provider.models) {
          console.warn(`⚠️ Provider ${providerKey} has no models`);
          continue;
        }
        
        console.log(`📋 Found ${Object.keys(provider.models).length} models in ${providerKey}`);
        
        for (const modelKey in provider.models) {
          const model = (provider.models as any)[modelKey];
          console.log(`🤖 Processing model: ${modelKey}`, model);
          
          // Skip deprecated models (but only if explicitly marked as deprecated)
          if (model.deprecated === true) {
            console.log(`⚠️ Skipping deprecated model: ${modelKey}`);
            continue;
          }
          
          if (!model.id || !model.name) {
            console.warn(`⚠️ Model ${modelKey} missing id or name:`, model);
            continue;
          }
          
          // Include all non-deprecated models
          const modelOption = { 
            id: model.id, 
            name: `${model.name} (${provider.name})`,
            provider: provider.name
          };
          console.log(`✅ Adding model:`, modelOption);
          parsedModels.push(modelOption);
        }
      }
      
      console.log(`🎯 Tool Definition: Loaded ${parsedModels.length} models:`, parsedModels);
      
      if (parsedModels.length === 0) {
        console.error('❌ No models were loaded! This is a problem.');
        setError('No AI models were found in the configuration.');
      } else {
        setAvailableModels(parsedModels);
      }
    } catch (err) {
      console.error('❌ Failed to parse models:', err);
      setError('Failed to load AI models from default-models.json. Check console.');
    }
  }, []);

  const fetchBrainstorms = useCallback(async () => {
    try {
      setIsLoading(true);
      // Mock implementation - you would replace this with actual DB call
      setSavedBrainstorms([]);
      setError(null);
    } catch (err) {
      console.error('Failed to load saved brainstorms:', err);
      setError('Failed to load saved brainstorms. Check console.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleSubmit = async () => {
    // FIXED: Clear logs and progress indicators when starting new test
    clearLogsAndProgress();
    
    // Mock implementation for demonstration
    setIsLoading(true);
    addWSLog('🚀 Starting tool generation test...');
    
    // Simulate some processing
    setTimeout(() => {
      addWSLog('✅ Test completed successfully!');
      setIsLoading(false);
    }, 2000);
  };

  // Initialize effects
  useEffect(() => {
    fetchDefaultModel();
    fetchModels();
    fetchBrainstorms();
  }, []);

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Tool Generation Workbench</h1>
          <p className="text-gray-600 dark:text-gray-400">Test and debug AI tool generation workflows</p>
        </div>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
        {/* Left Column: Configuration */}
        <div className="xl:col-span-1 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="mr-2 h-5 w-5" />
                Configuration
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label>Workflow Mode</Label>
                <RadioGroup value={workflowMode} onValueChange={(value: WorkflowMode) => setWorkflowMode(value)}>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="v2" id="v2" />
                    <Label htmlFor="v2">V2 Orchestration</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="debug" id="debug" />
                    <Label htmlFor="debug">Debug Single Agent</Label>
                  </div>
                </RadioGroup>
              </div>

              {workflowMode === 'v2' && (
                <div>
                  <Label>Selected Models</Label>
                  <ScrollArea className="h-32 w-full border rounded-md p-2">
                    <div className="space-y-2">
                      {availableModels.slice(0, 5).map(model => (
                        <div key={model.id} className="flex items-center space-x-2">
                          <Checkbox 
                            id={model.id}
                            checked={selectedModelIds.includes(model.id)}
                          />
                          <Label htmlFor={model.id} className="text-sm">
                            {model.name}
                          </Label>
                        </div>
                      ))}
                    </div>
                  </ScrollArea>
                </div>
              )}

              <Button onClick={handleSubmit} disabled={isLoading} className="w-full">
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Running...
                  </>
                ) : (
                  <>
                    <Play className="mr-2 h-4 w-4" />
                    Start Test
                  </>
                )}
              </Button>

              {/* FIXED: Models Used Display */}
              {getModelsUsed().length > 0 && (
                <Alert>
                  <Info className="h-4 w-4" />
                  <AlertTitle>Models Used</AlertTitle>
                  <AlertDescription>
                    {getModelsUsed().map(modelId => {
                      const model = availableModels.find(m => m.id === modelId);
                      return model ? model.name : modelId;
                    }).join(', ')}
                  </AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Middle Column: Live Activity Logs */}
        <div className="xl:col-span-1 space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="flex items-center">
                <Activity className="mr-2 h-5 w-5" />
                Live Activity Logs
              </CardTitle>
              <Button variant="outline" size="sm" onClick={clearLogsAndProgress}>
                Clear Logs
              </Button>
            </CardHeader>
            <CardContent>
              {/* FIXED: Auto-scrolling logs container */}
              <ScrollArea className="h-64 w-full border rounded-md p-4">
                <div className="space-y-1">
                  {wsLogs.length === 0 ? (
                    <p className="text-gray-500 text-sm italic">
                      No logs yet. Start a test to see real-time activity.
                    </p>
                  ) : (
                    wsLogs.map((log, index) => (
                      <div key={index} className="text-xs font-mono text-gray-700 dark:text-gray-300">
                        {log}
                      </div>
                    ))
                  )}
                  {/* Auto-scroll anchor */}
                  <div ref={wsLogsEndRef} />
                </div>
              </ScrollArea>

              {/* Progress Steps */}
              {progressUpdates && progressUpdates.length > 0 && (
                <div className="mt-4">
                  <Label className="text-sm font-medium">Progress Steps</Label>
                  <ScrollArea className="h-32 w-full border rounded-md p-2 mt-2">
                    <div className="space-y-2">
                      {progressUpdates.map((progress, index) => (
                        <div key={index} className="flex items-center justify-between text-xs">
                          <span>{progress.stepName}</span>
                          <Badge variant={progress.status === 'completed' ? 'default' : 'secondary'}>
                            {progress.status}
                          </Badge>
                        </div>
                      ))}
                      {/* Auto-scroll anchor for progress */}
                      <div ref={progressSummaryEndRef} />
                    </div>
                  </ScrollArea>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Right Column: Tool Preview */}
        <div className="xl:col-span-1 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Eye className="mr-2 h-5 w-5" />
                Tool Preview
              </CardTitle>
            </CardHeader>
            <CardContent>
              <CanvasTool 
                isDarkMode={isDarkMode}
                productToolDefinition={finalProduct}
                isGenerating={isLoading}
                generatingMessage={isLoading ? "Generating your tool..." : ""}
              />
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Full Width Results Section */}
      <Tabs defaultValue="agent-results" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="agent-results">Agent Results</TabsTrigger>
          <TabsTrigger value="component-code">Component Code</TabsTrigger>
        </TabsList>

        <TabsContent value="agent-results" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Agent Results</CardTitle>
              <CardDescription>
                FIXED: Full, non-trimmed agent output results
              </CardDescription>
            </CardHeader>
            <CardContent>
              {testJob?.result ? (
                <ScrollArea className="h-96 w-full">
                  <pre className="text-xs font-mono whitespace-pre-wrap">
                    {/* FIXED: Show full results without trimming */}
                    {JSON.stringify(testJob.result, null, 2)}
                  </pre>
                </ScrollArea>
              ) : (
                <div className="flex items-center justify-center h-48 rounded-lg border-2 border-dashed">
                  <div className="text-center">
                    <Brain className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500 font-medium">No Agent Results</p>
                    <p className="text-gray-400 text-sm">Run a test to see agent outputs</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="component-code" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Generated Component Code</CardTitle>
            </CardHeader>
            <CardContent>
              {assembledCode ? (
                <ScrollArea className="h-96 w-full border rounded-md">
                  <pre className="p-4 text-xs font-mono whitespace-pre-wrap">
                    <code>{assembledCode}</code>
                  </pre>
                </ScrollArea>
              ) : (
                <div className="flex items-center justify-center h-48 rounded-lg border-2 border-dashed">
                  <div className="text-center">
                    <Code className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500 font-medium">No Component Code</p>
                    <p className="text-gray-400 text-sm">Generate a tool to see the code</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ToolTester; 